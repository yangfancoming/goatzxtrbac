<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goat.zxt.system.dao.DeptDao">

    <resultMap id="postMap" type="com.goat.zxt.system.entity.SysDept">
        <id column="dept_id" jdbcType="INTEGER" property="deptId" />
        <id column="parent_id" jdbcType="INTEGER" property="parentId" />
        <result column="ancestors" jdbcType="VARCHAR" property="ancestors" />
        <result column="dept_name" jdbcType="VARCHAR" property="deptName" />
        <result column="dept_sort" jdbcType="INTEGER" property="deptSort" />
        <result column="dept_status" jdbcType="BOOLEAN" property="deptStatus" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    </resultMap>


    <sql id="deptFragment">
        select d.dept_id,d.parent_id,d.dept_name,d.dept_sort,d.dept_status,d.create_time,d.update_time from sys_dept d
    </sql>

    <select id="list" resultType="com.goat.zxt.system.entity.SysDept">
        <include refid="deptFragment"/>
        <where>
            <if test="deptName != null and deptName != ''">
                AND d.dept_name like CONCAT('%', #{deptName}, '%')
            </if>
            <if test="deptStatus != null and deptStatus != '' or deptStatus ==0">
                AND d.dept_status = #{deptStatus}
            </if>
            <!-- 数据范围过滤 -->
            ${params.dataScope}
        </where>
        order by d.dept_sort
    </select>


    <select id="buildAll" resultType="com.goat.zxt.system.dto.TreeDto">
        select d.dept_id as id,d.parent_id,d.dept_name as title  from sys_dept d
        <where>
            ${params.dataScope}  <!-- 数据范围过滤 -->
        </where>
    </select>


    <select id="selectDeptById" parameterType="integer" resultType="com.goat.zxt.system.entity.SysDept">
		select d.dept_id, d.parent_id, d.ancestors, d.dept_name, d.dept_status,
			(select s.dept_name from sys_dept s where s.dept_id = d.parent_id) parent_name
		from sys_dept d
		where d.dept_id = #{deptId}
	</select>

    <select id="isExist" resultType="com.goat.zxt.system.entity.SysDept">
        <include refid="deptFragment"/>
        where dept_name= #{deptName} and parent_id = #{parentId} limit 1
    </select>

    <select id="selectChildrenDeptById" parameterType="integer" resultType="com.goat.zxt.system.entity.SysDept">
		select * from sys_dept where find_in_set(#{id}, ancestors)
	</select>

    <select id="listByRoleId" parameterType="integer" resultType="com.goat.zxt.system.dto.TreeDto">
		select d.dept_id as id,d.parent_id,d.dept_name as title
		from sys_dept d
			left join sys_role_dept rd on d.dept_id = rd.dept_id
		where rd.role_id = #{id}
		order by d.parent_id
	</select>

    <update id="updateDeptChildren" parameterType="java.util.List">
        update sys_dept set ancestors =
        <foreach collection="depts" item="item" index="index" separator=" " open="case dept_id" close="end">
            when #{item.id} then #{item.ancestors}
        </foreach>
        where id in
        <foreach collection="depts" item="item" index="index" separator="," open="(" close=")">
            #{item.id}
        </foreach>
    </update>

    <update id="updateDept">
        update sys_dept d
        <set>
            <if test="parentId != null and parentId != 0">parent_id = #{parentId},</if>
            <if test="deptName != null and deptName != ''"> dept_name = #{deptName},</if>
            <if test="ancestors != null and ancestors != ''">ancestors = #{ancestors},</if>
            <if test="deptSort != null">dept_sort = #{deptSort},</if>
            <if test="deptStatus != null">dept_status = #{deptStatus},</if>
            update_time = #{updateTime}
        </set>
        where d.dept_id = #{deptId}
    </update>

    <update id="updateDeptStatus" parameterType="com.goat.zxt.system.entity.SysDept">
        update sys_dept
        <set>
            <if test="deptStatus != null and deptStatus != ''">dept_status = #{deptStatus},</if>
            update_time = #{updateTime}
        </set>
        where dept_id in (${ancestors})
    </update>

    <select id="selectNormalChildrenDeptById" parameterType="integer" resultType="int">
		select count(*) from sys_dept where dept_status = 1 and find_in_set(#{dept_id}, ancestors)
	</select>

    <!-- mybatis 数量转布尔类型的原则是 0为false   >=1 为true-->
    <select id="isExistSubDept" parameterType="integer" resultType="java.lang.Boolean">
        select count(1) from sys_dept WHERE parent_id = #{parentId}
    </select>

    <select id="isExistSubUser" parameterType="integer" resultType="java.lang.Boolean">
		select count(1) from sys_user where dept_id = #{deptId}
	</select>

    <delete id="deleteDeptById" parameterType="integer">
		delete from sys_dept where dept_id =#{deptId}
	</delete>
</mapper>
